<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_diabetty_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Colide</parentName>
  <maskName>spr_diabetty_collision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inicializa_objeto();
cria_controle();

cria_hitbox();

//Contador que define quantos steps são necessários pra dar o ataque pesado
carrega_max = 100;
carrega = carrega_max;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Estados e movimentacao

//Movimentacao basica
vx+=dir;
vy+=cim;
vx = clamp(vx,-velMax,velMax);
vy = clamp(vy,-velMax,velMax);
vx*=0.8;
vy*=0.8;
podeColidir = true;
var estado = Estado;
//Estado Principal
switch (Estado) {
    case Parado:
        pulaDash = false;
        if (dir != 0 || cim != 0) {Estado = Anda;}
        if dash{Estado = Dash;dashDir = dir*2; dashCim = cim*2;}
        if pula {Estado = Pula;vz = -10;}
        ataca();
    break;
    
    
    case Anda:
        if (dir == 0 &amp;&amp; cim == 0) {Estado = Parado;}
        if pula {Estado = Pula;vz = -10;}
        if dash{Estado = Dash;dashDir = dir*2; dashCim = cim*2;}
        movimenta_geral(vx,vy);
        define_dir();
        ataca();
    break;
    
    case Dash:
        if (dashDir == 0) &amp;&amp; (dashCim == 0){
            dashDir = lengthdir_x(2,get_dir());
            dashCim = lengthdir_y(2,get_dir());
        }
        
        if (contador_conta(20)){
            dashou = true;
            if z!=0{
                vz = 0;
                Estado = Pula;
            } else {
                Estado = Parado;
            }
        }
        if z!=0{
            podeColidir = false;
        }else{
            if pula {Estado = Pula;vz = -10;pulaDash = true;}
            ataca();
        }
        movimenta_geral(dashDir*velMax,dashCim*velMax);
        
    break;
    
    case Ataca:
        //Altera o estado no animation end
        ataca();
        var vel = (image_number - image_index)/image_number;
        var sp = 2;
        var dx = (vx+lengthdir_x(sp,get_dir()))*vel;
        var dy = (vy+lengthdir_y(sp,get_dir()))*vel;
        
        dx = clamp(dx,-sp,sp);
        dy = clamp(dy,-sp,sp);
        
        movimenta_geral(dx,dy);
    break;
    
    
    case AtacaPesado:
        if (!bater_direct) {
            Estado = Parado;
            var xx = x + lengthdir_x(50,get_dir());
            var yy = y + lengthdir_y(50,get_dir());
            instance_create(xx,yy,obj_ataquepesado);
        }
        movimenta_geral(vx*0.3,vy*0.3);
    break;
    
    case Pula:
        podeColidir = false;
        define_dir();
        var mult = 1;
        if pulaDash{mult = 2;}
        movimenta_geral(vx*mult,vy*mult);
        if (pulando &amp;&amp; vz &gt; 3){vz = 3;}
        vz+=0.45;
        z+=vz;      
        if z &gt; 0{z = 0;}  
        if (z &gt;= 0){z = 0;if (!place_meeting(x,y,Colide)){Estado = Parado;}} 
        if (z &lt; 0) &amp;&amp; (bater){Estado = CaiPesado;}
        if (dash &amp;&amp; !dashou){Estado = Dash;dashDir = dir*2; dashCim = cim*2;z-=0.1;}
    break;
    
    case CaiPesado:
        podeColidir = false;
        vz+=1.1;
        z+=vz;        
        if (z &gt;= 0){
            z = 0;
            instance_create(x,y,obj_ataquepesado);
            if !place_meeting(x,y,Colide){
                Estado = Parado;
            } else {
                Estado = Pula;
            }
        }
        
    break;
}

depth_atualiza();
player_nos_limites_da_view();

if estado!=Estado{contador_zera();}
if (Estado != Pula &amp;&amp; Estado != Dash){dashou = false;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch Estado {
    case Ataca:
        //Caso esteja segurando o botão, muda para o ataque pesado, caso contrário
        //volta pro parado
        if !bater_direct {
            Estado = Parado;
            ataque = 0;
        }
        else {
            Estado = AtacaPesado;
            ataque = 0;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desenha sprite

image_speed = 0.3;

switch Estado {

    case Parado:
        auto_dir("spr_diabetty");
    break;
    
    case Anda:
        auto_dir("spr_diabetty_move");
    break;
    
    case Ataca: 
        //Um jeito bom de controlar a animacao é você utilizar porcentagem
        //as primeiras animacoes normalmente sao mais rapidas
        //e eh quando a hitbox esta ativa
    
        //depois de 60% da animacao ela fica devagar para poder continuar o combo
        //se n tivesse isso ele acabava a animacao e fodase
        if image_index &gt; image_number *0.8{
            image_speed = 0.03;
            if (ataque = 3){image_speed = 0.06;}
        } else if image_index &gt; 0.6{
            image_speed = 0.2;
        }else{
            image_speed = 0.4;
        }
        auto_dir("spr_diabetty_slash" + string(ataque));
    break;
    
    case AtacaPesado:
        image_index = sprite_get_number(sprite_index)-1
    break;

    case Pula:
        auto_dir("spr_diabetty");       
    break;
}
    //desenha só para saber onde o player está é um círculo simples
draw_set_alpha(0.3);
draw_set_colour(c_black);
    draw_circle(x,y,10,false);
draw_set_alpha(1);

    //Muda a posição de desenho e depois volta pra original
    
Y = y;
y = y+z;
    //Efeito maneiro quando cai
    if (Estado == CaiPesado || Estado == Dash || (Estado == Pula &amp;&amp; pulaDash)){
        scr_trace();
    }
    draw_self();
y=Y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugs
//Agora tem

draw_text(100,100,Estado);
draw_text(150,100,ataque);
draw_text(200,100,image_index);




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
